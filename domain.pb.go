// Code generated by protoc-gen-go.
// source: domain.proto
// DO NOT EDIT!

package gmetric

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// OperationMetric applicaiton performance operation counter
type OperationMetric struct {
	Name         string  `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Unit         string  `protobuf:"bytes,2,opt,name=unit" json:"unit,omitempty"`
	Description  string  `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	ErrorCount   int64   `protobuf:"varint,4,opt,name=errorCount" json:"errorCount,omitempty"`
	Count        int64   `protobuf:"varint,5,opt,name=count" json:"count,omitempty"`
	RecentValues []int64 `protobuf:"varint,6,rep,packed,name=recentValues" json:"recentValues,omitempty"`
	Averages     []int64 `protobuf:"varint,7,rep,packed,name=averages" json:"averages,omitempty"`
}

func (m *OperationMetric) Reset()                    { *m = OperationMetric{} }
func (m *OperationMetric) String() string            { return proto.CompactTextString(m) }
func (*OperationMetric) ProtoMessage()               {}
func (*OperationMetric) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

// KeyedOperationMetric applicaiton performance operation counter by type(key)
type KeyedOperationMetric struct {
	Metrics map[string]*OperationMetric `protobuf:"bytes,1,rep,name=metrics" json:"metrics,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *KeyedOperationMetric) Reset()                    { *m = KeyedOperationMetric{} }
func (m *KeyedOperationMetric) String() string            { return proto.CompactTextString(m) }
func (*KeyedOperationMetric) ProtoMessage()               {}
func (*KeyedOperationMetric) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *KeyedOperationMetric) GetMetrics() map[string]*OperationMetric {
	if m != nil {
		return m.Metrics
	}
	return nil
}

// OperationMetricPackage operation metric pacakge
type OperationMetricPackage struct {
	Name         string                           `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Metrics      map[string]*OperationMetric      `protobuf:"bytes,2,rep,name=metrics" json:"metrics,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	KeyedMetrics map[string]*KeyedOperationMetric `protobuf:"bytes,3,rep,name=keyedMetrics" json:"keyedMetrics,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *OperationMetricPackage) Reset()                    { *m = OperationMetricPackage{} }
func (m *OperationMetricPackage) String() string            { return proto.CompactTextString(m) }
func (*OperationMetricPackage) ProtoMessage()               {}
func (*OperationMetricPackage) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *OperationMetricPackage) GetMetrics() map[string]*OperationMetric {
	if m != nil {
		return m.Metrics
	}
	return nil
}

func (m *OperationMetricPackage) GetKeyedMetrics() map[string]*KeyedOperationMetric {
	if m != nil {
		return m.KeyedMetrics
	}
	return nil
}

func init() {
	proto.RegisterType((*OperationMetric)(nil), "gmetric.OperationMetric")
	proto.RegisterType((*KeyedOperationMetric)(nil), "gmetric.KeyedOperationMetric")
	proto.RegisterType((*OperationMetricPackage)(nil), "gmetric.OperationMetricPackage")
}

func init() { proto.RegisterFile("domain.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 363 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xb4, 0x53, 0x4d, 0x4b, 0xc3, 0x40,
	0x10, 0x65, 0xbb, 0xfd, 0xd0, 0x69, 0x44, 0x5d, 0x8a, 0xac, 0x05, 0x25, 0xe4, 0x14, 0x44, 0x02,
	0xb6, 0x17, 0xf1, 0x58, 0x3f, 0x2e, 0x45, 0x2c, 0x41, 0x3d, 0x0a, 0xeb, 0x76, 0x28, 0xa1, 0x66,
	0x53, 0x36, 0xdb, 0x42, 0x8f, 0xfe, 0x25, 0xff, 0x89, 0xff, 0x48, 0xb2, 0x89, 0x35, 0xad, 0x51,
	0x4f, 0x9e, 0x32, 0xfb, 0xde, 0xce, 0x9b, 0xbc, 0xb7, 0x0c, 0x38, 0xe3, 0x24, 0x16, 0x91, 0x0a,
	0x66, 0x3a, 0x31, 0x09, 0x6b, 0x4d, 0x62, 0x34, 0x3a, 0x92, 0xde, 0x3b, 0x81, 0xdd, 0xbb, 0x19,
	0x6a, 0x61, 0xa2, 0x44, 0xdd, 0x5a, 0x8c, 0x31, 0xa8, 0x2b, 0x11, 0x23, 0x27, 0x2e, 0xf1, 0xb7,
	0x43, 0x5b, 0x67, 0xd8, 0x5c, 0x45, 0x86, 0xd7, 0x72, 0x2c, 0xab, 0x99, 0x0b, 0xed, 0x31, 0xa6,
	0x52, 0x47, 0xb3, 0xac, 0x99, 0x53, 0x4b, 0x95, 0x21, 0x76, 0x0c, 0x80, 0x5a, 0x27, 0xfa, 0x32,
	0x99, 0x2b, 0xc3, 0xeb, 0x2e, 0xf1, 0x69, 0x58, 0x42, 0x58, 0x07, 0x1a, 0xd2, 0x52, 0x0d, 0x4b,
	0xe5, 0x07, 0xe6, 0x81, 0xa3, 0x51, 0xa2, 0x32, 0x8f, 0xe2, 0x65, 0x8e, 0x29, 0x6f, 0xba, 0xd4,
	0xa7, 0xe1, 0x1a, 0xc6, 0xba, 0xb0, 0x25, 0x16, 0xa8, 0xc5, 0x04, 0x53, 0xde, 0xb2, 0xfc, 0xea,
	0xec, 0xbd, 0x11, 0xe8, 0x0c, 0x71, 0x89, 0xe3, 0x4d, 0x63, 0x57, 0xd0, 0xca, 0x6d, 0xa7, 0x9c,
	0xb8, 0xd4, 0x6f, 0xf7, 0x4e, 0x82, 0x22, 0x87, 0xa0, 0xea, 0x7e, 0x90, 0x7f, 0xd2, 0x6b, 0x65,
	0xf4, 0x32, 0xfc, 0x6c, 0xed, 0xde, 0x83, 0x53, 0x26, 0xd8, 0x1e, 0xd0, 0x29, 0x2e, 0x8b, 0xb4,
	0xb2, 0x92, 0x05, 0xd0, 0x58, 0x64, 0xbf, 0x69, 0xd3, 0x6a, 0xf7, 0xf8, 0x6a, 0xca, 0xc6, 0x80,
	0x30, 0xbf, 0x76, 0x51, 0x3b, 0x27, 0xde, 0x2b, 0x85, 0x83, 0x0d, 0x7a, 0x24, 0xe4, 0x54, 0x4c,
	0xb0, 0xf2, 0x3d, 0x6e, 0xbe, 0xac, 0xd4, 0xac, 0x95, 0xd3, 0x9f, 0x86, 0x14, 0x2a, 0xd5, 0x66,
	0xd8, 0x03, 0x38, 0xd3, 0xcc, 0x7a, 0xc1, 0x72, 0x6a, 0xc5, 0xce, 0xfe, 0x12, 0x1b, 0x96, 0x7a,
	0x72, 0xc5, 0x35, 0x99, 0xff, 0xc9, 0xa8, 0xfb, 0x04, 0xfb, 0xdf, 0x06, 0x57, 0x48, 0xf7, 0xd7,
	0xa5, 0x8f, 0x7e, 0x7d, 0xe4, 0x92, 0xfe, 0xe0, 0x10, 0x76, 0x64, 0x12, 0x07, 0x8b, 0x48, 0x28,
	0x13, 0x48, 0x89, 0x83, 0x66, 0xbe, 0x34, 0x23, 0xf2, 0xdc, 0xb4, 0x7b, 0xd3, 0xff, 0x08, 0x00,
	0x00, 0xff, 0xff, 0x1e, 0x22, 0x97, 0xba, 0x47, 0x03, 0x00, 0x00,
}
