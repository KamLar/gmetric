// Code generated by protoc-gen-gogo.
// source: domain.proto
// DO NOT EDIT!

/*
	Package gmetric is a generated protocol buffer package.

	It is generated from these files:
		domain.proto
		service.proto
		service_contract.proto

	It has these top-level messages:
		OperationMetric
		KeyedOperationMetric
		OperationMetricPackage
		QueryRequest
		QueryResponse
*/
package gmetric

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// OperationMetric applicaiton performance operation counter
type OperationMetric struct {
	Name         string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Unit         string  `protobuf:"bytes,2,opt,name=unit,proto3" json:"unit,omitempty"`
	Description  string  `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	ErrorCount   uint64  `protobuf:"varint,4,opt,name=errorCount,proto3" json:"errorCount,omitempty"`
	Count        uint64  `protobuf:"varint,5,opt,name=count,proto3" json:"count,omitempty"`
	RecentValues []int64 `protobuf:"varint,6,rep,packed,name=recentValues" json:"recentValues,omitempty"`
	Averages     []int64 `protobuf:"varint,7,rep,packed,name=averages" json:"averages,omitempty"`
	AvgValue     int64   `protobuf:"varint,8,opt,name=avgValue,proto3" json:"avgValue,omitempty"`
	MinValue     int64   `protobuf:"varint,9,opt,name=minValue,proto3" json:"minValue,omitempty"`
	MaxValue     int64   `protobuf:"varint,10,opt,name=maxValue,proto3" json:"maxValue,omitempty"`
}

func (m *OperationMetric) Reset()                    { *m = OperationMetric{} }
func (m *OperationMetric) String() string            { return proto.CompactTextString(m) }
func (*OperationMetric) ProtoMessage()               {}
func (*OperationMetric) Descriptor() ([]byte, []int) { return fileDescriptorDomain, []int{0} }

// KeyedOperationMetric applicaiton performance operation counter by type(key)
type KeyedOperationMetric struct {
	Metrics map[string]*OperationMetric `protobuf:"bytes,1,rep,name=metrics" json:"metrics,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *KeyedOperationMetric) Reset()                    { *m = KeyedOperationMetric{} }
func (m *KeyedOperationMetric) String() string            { return proto.CompactTextString(m) }
func (*KeyedOperationMetric) ProtoMessage()               {}
func (*KeyedOperationMetric) Descriptor() ([]byte, []int) { return fileDescriptorDomain, []int{1} }

func (m *KeyedOperationMetric) GetMetrics() map[string]*OperationMetric {
	if m != nil {
		return m.Metrics
	}
	return nil
}

// OperationMetricPackage operation metric pacakge
type OperationMetricPackage struct {
	Name         string                           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Metrics      map[string]*OperationMetric      `protobuf:"bytes,2,rep,name=metrics" json:"metrics,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	KeyedMetrics map[string]*KeyedOperationMetric `protobuf:"bytes,3,rep,name=keyedMetrics" json:"keyedMetrics,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *OperationMetricPackage) Reset()                    { *m = OperationMetricPackage{} }
func (m *OperationMetricPackage) String() string            { return proto.CompactTextString(m) }
func (*OperationMetricPackage) ProtoMessage()               {}
func (*OperationMetricPackage) Descriptor() ([]byte, []int) { return fileDescriptorDomain, []int{2} }

func (m *OperationMetricPackage) GetMetrics() map[string]*OperationMetric {
	if m != nil {
		return m.Metrics
	}
	return nil
}

func (m *OperationMetricPackage) GetKeyedMetrics() map[string]*KeyedOperationMetric {
	if m != nil {
		return m.KeyedMetrics
	}
	return nil
}

func init() {
	proto.RegisterType((*OperationMetric)(nil), "gmetric.OperationMetric")
	proto.RegisterType((*KeyedOperationMetric)(nil), "gmetric.KeyedOperationMetric")
	proto.RegisterType((*OperationMetricPackage)(nil), "gmetric.OperationMetricPackage")
}
func (m *OperationMetric) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *OperationMetric) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintDomain(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	if len(m.Unit) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintDomain(data, i, uint64(len(m.Unit)))
		i += copy(data[i:], m.Unit)
	}
	if len(m.Description) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintDomain(data, i, uint64(len(m.Description)))
		i += copy(data[i:], m.Description)
	}
	if m.ErrorCount != 0 {
		data[i] = 0x20
		i++
		i = encodeVarintDomain(data, i, uint64(m.ErrorCount))
	}
	if m.Count != 0 {
		data[i] = 0x28
		i++
		i = encodeVarintDomain(data, i, uint64(m.Count))
	}
	if len(m.RecentValues) > 0 {
		data2 := make([]byte, len(m.RecentValues)*10)
		var j1 int
		for _, num1 := range m.RecentValues {
			num := uint64(num1)
			for num >= 1<<7 {
				data2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			data2[j1] = uint8(num)
			j1++
		}
		data[i] = 0x32
		i++
		i = encodeVarintDomain(data, i, uint64(j1))
		i += copy(data[i:], data2[:j1])
	}
	if len(m.Averages) > 0 {
		data4 := make([]byte, len(m.Averages)*10)
		var j3 int
		for _, num1 := range m.Averages {
			num := uint64(num1)
			for num >= 1<<7 {
				data4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			data4[j3] = uint8(num)
			j3++
		}
		data[i] = 0x3a
		i++
		i = encodeVarintDomain(data, i, uint64(j3))
		i += copy(data[i:], data4[:j3])
	}
	if m.AvgValue != 0 {
		data[i] = 0x40
		i++
		i = encodeVarintDomain(data, i, uint64(m.AvgValue))
	}
	if m.MinValue != 0 {
		data[i] = 0x48
		i++
		i = encodeVarintDomain(data, i, uint64(m.MinValue))
	}
	if m.MaxValue != 0 {
		data[i] = 0x50
		i++
		i = encodeVarintDomain(data, i, uint64(m.MaxValue))
	}
	return i, nil
}

func (m *KeyedOperationMetric) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *KeyedOperationMetric) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Metrics) > 0 {
		for k, _ := range m.Metrics {
			data[i] = 0xa
			i++
			v := m.Metrics[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovDomain(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovDomain(uint64(len(k))) + msgSize
			i = encodeVarintDomain(data, i, uint64(mapSize))
			data[i] = 0xa
			i++
			i = encodeVarintDomain(data, i, uint64(len(k)))
			i += copy(data[i:], k)
			if v != nil {
				data[i] = 0x12
				i++
				i = encodeVarintDomain(data, i, uint64(v.Size()))
				n5, err := v.MarshalTo(data[i:])
				if err != nil {
					return 0, err
				}
				i += n5
			}
		}
	}
	return i, nil
}

func (m *OperationMetricPackage) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *OperationMetricPackage) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintDomain(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	if len(m.Metrics) > 0 {
		for k, _ := range m.Metrics {
			data[i] = 0x12
			i++
			v := m.Metrics[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovDomain(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovDomain(uint64(len(k))) + msgSize
			i = encodeVarintDomain(data, i, uint64(mapSize))
			data[i] = 0xa
			i++
			i = encodeVarintDomain(data, i, uint64(len(k)))
			i += copy(data[i:], k)
			if v != nil {
				data[i] = 0x12
				i++
				i = encodeVarintDomain(data, i, uint64(v.Size()))
				n6, err := v.MarshalTo(data[i:])
				if err != nil {
					return 0, err
				}
				i += n6
			}
		}
	}
	if len(m.KeyedMetrics) > 0 {
		for k, _ := range m.KeyedMetrics {
			data[i] = 0x1a
			i++
			v := m.KeyedMetrics[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovDomain(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovDomain(uint64(len(k))) + msgSize
			i = encodeVarintDomain(data, i, uint64(mapSize))
			data[i] = 0xa
			i++
			i = encodeVarintDomain(data, i, uint64(len(k)))
			i += copy(data[i:], k)
			if v != nil {
				data[i] = 0x12
				i++
				i = encodeVarintDomain(data, i, uint64(v.Size()))
				n7, err := v.MarshalTo(data[i:])
				if err != nil {
					return 0, err
				}
				i += n7
			}
		}
	}
	return i, nil
}

func encodeFixed64Domain(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Domain(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintDomain(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *OperationMetric) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovDomain(uint64(l))
	}
	l = len(m.Unit)
	if l > 0 {
		n += 1 + l + sovDomain(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovDomain(uint64(l))
	}
	if m.ErrorCount != 0 {
		n += 1 + sovDomain(uint64(m.ErrorCount))
	}
	if m.Count != 0 {
		n += 1 + sovDomain(uint64(m.Count))
	}
	if len(m.RecentValues) > 0 {
		l = 0
		for _, e := range m.RecentValues {
			l += sovDomain(uint64(e))
		}
		n += 1 + sovDomain(uint64(l)) + l
	}
	if len(m.Averages) > 0 {
		l = 0
		for _, e := range m.Averages {
			l += sovDomain(uint64(e))
		}
		n += 1 + sovDomain(uint64(l)) + l
	}
	if m.AvgValue != 0 {
		n += 1 + sovDomain(uint64(m.AvgValue))
	}
	if m.MinValue != 0 {
		n += 1 + sovDomain(uint64(m.MinValue))
	}
	if m.MaxValue != 0 {
		n += 1 + sovDomain(uint64(m.MaxValue))
	}
	return n
}

func (m *KeyedOperationMetric) Size() (n int) {
	var l int
	_ = l
	if len(m.Metrics) > 0 {
		for k, v := range m.Metrics {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovDomain(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovDomain(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovDomain(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *OperationMetricPackage) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovDomain(uint64(l))
	}
	if len(m.Metrics) > 0 {
		for k, v := range m.Metrics {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovDomain(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovDomain(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovDomain(uint64(mapEntrySize))
		}
	}
	if len(m.KeyedMetrics) > 0 {
		for k, v := range m.KeyedMetrics {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovDomain(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovDomain(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovDomain(uint64(mapEntrySize))
		}
	}
	return n
}

func sovDomain(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozDomain(x uint64) (n int) {
	return sovDomain(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *OperationMetric) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OperationMetric: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OperationMetric: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDomain
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDomain
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Unit = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDomain
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCount", wireType)
			}
			m.ErrorCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.ErrorCount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Count |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDomain
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthDomain
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDomain
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := data[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RecentValues = append(m.RecentValues, v)
				}
			} else if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDomain
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RecentValues = append(m.RecentValues, v)
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RecentValues", wireType)
			}
		case 7:
			if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDomain
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthDomain
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDomain
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := data[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Averages = append(m.Averages, v)
				}
			} else if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDomain
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Averages = append(m.Averages, v)
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Averages", wireType)
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvgValue", wireType)
			}
			m.AvgValue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.AvgValue |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinValue", wireType)
			}
			m.MinValue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.MinValue |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxValue", wireType)
			}
			m.MaxValue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.MaxValue |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDomain(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KeyedOperationMetric) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeyedOperationMetric: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeyedOperationMetric: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metrics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDomain
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthDomain
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(data[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.Metrics == nil {
				m.Metrics = make(map[string]*OperationMetric)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDomain
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapmsglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDomain
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					mapmsglen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if mapmsglen < 0 {
					return ErrInvalidLengthDomain
				}
				postmsgIndex := iNdEx + mapmsglen
				if mapmsglen < 0 {
					return ErrInvalidLengthDomain
				}
				if postmsgIndex > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := &OperationMetric{}
				if err := mapvalue.Unmarshal(data[iNdEx:postmsgIndex]); err != nil {
					return err
				}
				iNdEx = postmsgIndex
				m.Metrics[mapkey] = mapvalue
			} else {
				var mapvalue *OperationMetric
				m.Metrics[mapkey] = mapvalue
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDomain(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OperationMetricPackage) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OperationMetricPackage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OperationMetricPackage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDomain
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metrics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDomain
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthDomain
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(data[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.Metrics == nil {
				m.Metrics = make(map[string]*OperationMetric)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDomain
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapmsglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDomain
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					mapmsglen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if mapmsglen < 0 {
					return ErrInvalidLengthDomain
				}
				postmsgIndex := iNdEx + mapmsglen
				if mapmsglen < 0 {
					return ErrInvalidLengthDomain
				}
				if postmsgIndex > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := &OperationMetric{}
				if err := mapvalue.Unmarshal(data[iNdEx:postmsgIndex]); err != nil {
					return err
				}
				iNdEx = postmsgIndex
				m.Metrics[mapkey] = mapvalue
			} else {
				var mapvalue *OperationMetric
				m.Metrics[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyedMetrics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDomain
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthDomain
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(data[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.KeyedMetrics == nil {
				m.KeyedMetrics = make(map[string]*KeyedOperationMetric)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDomain
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapmsglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDomain
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					mapmsglen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if mapmsglen < 0 {
					return ErrInvalidLengthDomain
				}
				postmsgIndex := iNdEx + mapmsglen
				if mapmsglen < 0 {
					return ErrInvalidLengthDomain
				}
				if postmsgIndex > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := &KeyedOperationMetric{}
				if err := mapvalue.Unmarshal(data[iNdEx:postmsgIndex]); err != nil {
					return err
				}
				iNdEx = postmsgIndex
				m.KeyedMetrics[mapkey] = mapvalue
			} else {
				var mapvalue *KeyedOperationMetric
				m.KeyedMetrics[mapkey] = mapvalue
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDomain(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDomain(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDomain
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthDomain
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDomain
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDomain(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDomain = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDomain   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("domain.proto", fileDescriptorDomain) }

var fileDescriptorDomain = []byte{
	// 419 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xb4, 0x93, 0xcd, 0x6a, 0xdb, 0x40,
	0x10, 0xc7, 0xbb, 0x92, 0x3f, 0xc7, 0x2a, 0x6d, 0x17, 0x53, 0x16, 0x43, 0x85, 0xd0, 0x49, 0x2d,
	0x45, 0x50, 0xfb, 0x52, 0x7a, 0x74, 0x3f, 0x2e, 0xa6, 0xd4, 0x88, 0xb6, 0xc7, 0xc0, 0x66, 0xbd,
	0x08, 0xe1, 0x68, 0x65, 0x56, 0x6b, 0x13, 0x1f, 0xf3, 0x16, 0x79, 0x81, 0xbc, 0x40, 0x9e, 0x22,
	0xc7, 0x3c, 0x42, 0x70, 0x5e, 0x24, 0x68, 0x57, 0x76, 0x64, 0x47, 0x49, 0x4e, 0x39, 0x69, 0xe7,
	0xff, 0xdb, 0xf9, 0x8f, 0x66, 0x86, 0x05, 0x67, 0x96, 0xa5, 0x34, 0x11, 0xe1, 0x42, 0x66, 0x2a,
	0xc3, 0xed, 0x38, 0xe5, 0x4a, 0x26, 0xcc, 0xbf, 0xb0, 0xe0, 0xcd, 0x9f, 0x05, 0x97, 0x54, 0x25,
	0x99, 0xf8, 0xad, 0x35, 0x8c, 0xa1, 0x21, 0x68, 0xca, 0x09, 0xf2, 0x50, 0xd0, 0x8d, 0xf4, 0xb9,
	0xd0, 0x96, 0x22, 0x51, 0xc4, 0x32, 0x5a, 0x71, 0xc6, 0x1e, 0xf4, 0x66, 0x3c, 0x67, 0x32, 0x59,
	0x14, 0xc9, 0xc4, 0xd6, 0xa8, 0x2a, 0x61, 0x17, 0x80, 0x4b, 0x99, 0xc9, 0xef, 0xd9, 0x52, 0x28,
	0xd2, 0xf0, 0x50, 0xd0, 0x88, 0x2a, 0x0a, 0xee, 0x43, 0x93, 0x69, 0xd4, 0xd4, 0xc8, 0x04, 0xd8,
	0x07, 0x47, 0x72, 0xc6, 0x85, 0xfa, 0x4f, 0x4f, 0x96, 0x3c, 0x27, 0x2d, 0xcf, 0x0e, 0xec, 0x68,
	0x4f, 0xc3, 0x03, 0xe8, 0xd0, 0x15, 0x97, 0x34, 0xe6, 0x39, 0x69, 0x6b, 0xbe, 0x8b, 0x0d, 0x8b,
	0xf5, 0x45, 0xd2, 0xf1, 0x90, 0x61, 0x26, 0x2e, 0x58, 0x9a, 0x08, 0xc3, 0xba, 0x86, 0x6d, 0x63,
	0xcd, 0xe8, 0xa9, 0x61, 0x50, 0xb2, 0x32, 0xf6, 0x2f, 0x11, 0xf4, 0x27, 0x7c, 0xcd, 0x67, 0x87,
	0xc3, 0xfa, 0x01, 0x6d, 0x33, 0xca, 0x9c, 0x20, 0xcf, 0x0e, 0x7a, 0xc3, 0x4f, 0x61, 0x39, 0xdb,
	0xb0, 0xee, 0x7e, 0x68, 0x3e, 0xf9, 0x4f, 0xa1, 0xe4, 0x3a, 0xda, 0xa6, 0x0e, 0xfe, 0x82, 0x53,
	0x05, 0xf8, 0x2d, 0xd8, 0x73, 0xbe, 0x2e, 0x37, 0x50, 0x1c, 0x71, 0x08, 0xcd, 0x95, 0xfe, 0xb3,
	0x62, 0x03, 0xbd, 0x21, 0xd9, 0x55, 0x39, 0x28, 0x10, 0x99, 0x6b, 0xdf, 0xac, 0xaf, 0xc8, 0x3f,
	0xb3, 0xe1, 0xfd, 0x01, 0x9e, 0x52, 0x36, 0xa7, 0x31, 0xaf, 0xdd, 0xf1, 0xaf, 0xfb, 0x56, 0x2c,
	0xdd, 0xca, 0xe7, 0xc7, 0x8a, 0x94, 0x2e, 0xf5, 0xcd, 0xe0, 0x7f, 0xe0, 0xcc, 0x8b, 0xd6, 0x4b,
	0x4a, 0x6c, 0x6d, 0xf6, 0xe5, 0x39, 0xb3, 0x49, 0x25, 0xc7, 0x38, 0xee, 0xd9, 0xbc, 0xcc, 0x8c,
	0x06, 0x47, 0xf0, 0xee, 0x41, 0xe1, 0x1a, 0xeb, 0xd1, 0xbe, 0xf5, 0x87, 0x27, 0x97, 0x5c, 0xf1,
	0x1f, 0x7f, 0xbc, 0xda, 0xb8, 0xe8, 0x7a, 0xe3, 0xa2, 0x9b, 0x8d, 0x8b, 0xce, 0x6f, 0xdd, 0x57,
	0xf0, 0x9a, 0x65, 0x69, 0xb8, 0x4a, 0xa8, 0x50, 0x21, 0x63, 0x7c, 0xdc, 0x32, 0x0f, 0x73, 0x8a,
	0x8e, 0x5b, 0xfa, 0x6d, 0x8e, 0xee, 0x02, 0x00, 0x00, 0xff, 0xff, 0x8f, 0x35, 0x29, 0x04, 0xab,
	0x03, 0x00, 0x00,
}
